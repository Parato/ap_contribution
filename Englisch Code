import tkinter as tk
from tkinter import ttk
from tkinter import IntVar
from collections import Counter
import sys
import os

# Kategorien mit Werten
categories = {
    "Icon": [("Lesser Ancient Icon", 450), ("Ancient Icon", 900), ("Greater Ancient Icon", 1350), ("Major Ancient Icon", 1800)],
    "Seal": [("Lesser Ancient Seal", 900), ("Ancient Seal", 1800), ("Greater Ancient Seal", 2700), ("Major Ancient Seal", 3600)],
    "Goblet": [("Lesser Ancient Goblet", 1200), ("Ancient Goblet", 2400), ("Greater Ancient Goblet", 3600), ("Major Ancient Goblet", 4800)],
    "Crown": [("Lesser Ancient Crown", 2400), ("Ancient Crown", 4800), ("Greater Ancient Crown", 7200), ("Major Ancient Crown", 9600)],
}

item_names = []
values = []
for group, items in categories.items():
    for name, value in items:
        item_names.append(name)
        values.append(value)

quantities = [0] * len(item_names)
player_totals = [0, 0]
player_names = ["Player 1", "Player 2"]
max_players = 6
min_players = 2

def enable_mouse_wheel_scroll():
    # Überprüfen, ob das Fenster gescrollt werden kann
    if canvas.bbox("all")[3] > root.winfo_height():  # Wenn der Inhalt höher als das Fenster ist
        root.bind_all("<MouseWheel>", on_mouse_wheel)  # Aktiviere das Scrollen mit der Maus

def on_mouse_wheel(event):
    # Scrollen nur zulassen, wenn die scrollregion größer ist als das sichtbare Fenster
    if canvas.bbox("all")[3] > root.winfo_height():
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")

def set_initial_scrollregion():
    # Setze den scrollregion initial auf den maximalen Bereich
    canvas.configure(scrollregion=(0, 0, root.winfo_width(), root.winfo_height()))

def get_resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):  # PyInstaller packt die Dateien in _MEIPASS
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def optimal_distribution(values, quantities, num_players):
    all_items = []
    for i, (value, quantity) in enumerate(zip(values, quantities)):
        all_items.extend([(value, i)] * quantity)
    all_items.sort(reverse=True, key=lambda x: x[0])
    groups = [[] for _ in range(num_players)]
    group_sums = [0] * num_players
    for item in all_items:
        min_group_index = group_sums.index(min(group_sums))
        groups[min_group_index].append(item)
        group_sums[min_group_index] += item[0]
    deviation = max(group_sums) - min(group_sums)
    return groups, group_sums, deviation

def update_player_labels():
    for i, frame in enumerate(player_frames):
        if i < len(player_names):
            for widget in frame.winfo_children():
                widget.destroy()
            frame.grid_columnconfigure(0, weight=1, uniform="equal")
            frame.grid_columnconfigure(1, weight=1, uniform="equal")
            frame.grid_columnconfigure(2, weight=1, uniform="equal")
            tk.Label(frame, text=f"{player_names[i]}", anchor="w").grid(row=0, column=0, sticky="w", padx=5)
            tk.Label(frame, text=f"{player_totals[i]} Abyss-Points", anchor="w").grid(row=0, column=1, sticky="w", padx=5)
            edit_button = ttk.Button(frame, text="Edit", command=lambda idx=i: edit_player_name(idx))
            edit_button.grid(row=0, column=2, padx=5)
        else:
            for widget in frame.winfo_children():
                widget.destroy()
    for i in range(len(player_names), max_players):
        player_frames[i].grid_forget()

    # Scrollregion nach dem Aktualisieren des Inhalts anpassen
    canvas.configure(scrollregion=canvas.bbox("all"))

    # Überprüfen, ob das Fenster scrollable geworden ist
    enable_mouse_wheel_scroll()

def edit_player_name(index):
    def save_name():
        new_name = entry.get()
        if new_name:
            player_names[index] = new_name
            update_player_labels()
        edit_window.destroy()

    edit_window = tk.Toplevel(root)
    edit_window.title("Edit Player Name")
    edit_window.iconbitmap(get_resource_path("deinicon.ico"))
    edit_window.geometry("320x150")
    tk.Label(edit_window, text="New Player Name:").pack(padx=10, pady=5)
    entry = ttk.Entry(edit_window)
    entry.insert(0, player_names[index])
    entry.pack(padx=10, pady=5)
    ttk.Button(edit_window, text="Save", command=save_name).pack(padx=10, pady=10)

def change_quantity(index, delta):
    quantities[index] = max(0, quantities[index] + delta)
    quantity_labels[index].config(text=str(quantities[index]))

def calculate():
    best_combination, group_sums, best_deviation = optimal_distribution(values, quantities, len(player_names))
    player_order = sorted(enumerate(player_totals), key=lambda x: x[1])
    group_order = sorted(enumerate(group_sums), key=lambda x: x[1], reverse=True)
    assignment = [None] * len(player_names)
    for player, group in zip(player_order, group_order):
        assignment[player[0]] = group[0]
    for widget in optimal_distribution_frame.winfo_children():
        widget.destroy()
    result_text = "Optimal Distribution:\n"
    for player_idx, group_idx in enumerate(assignment):
        if group_idx is not None:
            group = best_combination[group_idx]
            item_count = Counter(group)
            tk.Label(optimal_distribution_frame, text=f"{player_names[player_idx]}:", font=("Arial", 12, "bold")).pack(anchor="w", pady=5)
            group_frame = tk.Frame(optimal_distribution_frame)
            group_frame.pack(anchor="w", padx=20)
            for (value, index), count in item_count.items():
                name = item_names[index]
                item_var = tk.IntVar()
                item_frame = tk.Frame(group_frame)
                item_frame.pack(fill="x", pady=2)
                checkbox = tk.Checkbutton(
                    item_frame,
                    text=f"{count}x {name} (AP: {value})",
                    variable=item_var,
                    onvalue=1,
                    offvalue=0,
                    anchor="w",
                    command=lambda var=item_var, frame=item_frame: strike_through_item(var, frame)
                )
                checkbox.pack(side="left", anchor="w")
            tk.Label(optimal_distribution_frame, text=f"  -> Total: {group_sums[group_idx]} Abyss-Points").pack(anchor="w", padx=20, pady=5)
            player_totals[player_idx] += group_sums[group_idx]
    update_player_labels()
    for i in range(len(quantities)):
        quantities[i] = 0
        quantity_labels[i].config(text="0")

def strike_through_item(var, frame):
    for widget in frame.winfo_children():
        if var.get() == 1:
            widget.config(font="TkDefaultFont 9 overstrike")
        else:
            widget.config(font="TkDefaultFont")

def reset():
    global quantities, player_totals
    quantities = [0] * len(item_names)
    player_totals = [0] * len(player_names)
    update_player_labels()
    for widget in optimal_distribution_frame.winfo_children():
        widget.destroy()
    for i in range(len(quantities)):
        quantities[i] = 0
        quantity_labels[i].config(text="0")

def add_player():
    if len(player_names) < max_players:
        player_names.append(f"Player {len(player_names) + 1}")
        player_totals.append(0)
        update_player_labels()

def remove_player():
    if len(player_names) > min_players:
        player_names.pop()
        player_totals.pop()
        update_player_labels()

root = tk.Tk()
icon_path = get_resource_path("deinicon.ico")
root.iconbitmap(icon_path)
root.title("AP Distribution")
root.geometry("1300x640")

canvas = tk.Canvas(root)
vertical_scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
canvas.configure(yscrollcommand=vertical_scrollbar.set)
canvas.pack(side="left", fill="both", expand=True)
vertical_scrollbar.pack(side="right", fill="y")

scrollable_frame = tk.Frame(canvas)
scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
)
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

quantity_labels = []

optimal_distribution_frame = tk.Frame(scrollable_frame)
optimal_distribution_frame.pack(side="right", fill="both", expand=True, padx=10, pady=0)

result_label = tk.Label(optimal_distribution_frame, text="", anchor="nw", justify="left", wraplength=600)
result_label.pack(fill="both", expand=True)

main_frame = tk.Frame(scrollable_frame)
main_frame.pack(side="left", fill="both", expand=True, padx=10, pady=10)


item_frame = tk.Frame(main_frame)
item_frame.pack(side="top", fill="x", padx=5, pady=10)

action_button_frame = tk.Frame(main_frame)
action_button_frame.pack(side="top", fill="x", padx=5, pady=10)

button_frame = tk.Frame(main_frame)
button_frame.pack(side="top", fill="x", padx=5, pady=5)

row_frame = None
category_frames = []

for i, (category, items) in enumerate(categories.items()):
    if i % 2 == 0:
        row_frame = tk.Frame(item_frame)
        row_frame.pack(fill="x", padx=5, pady=5)
    frame = tk.LabelFrame(row_frame, text=category)
    frame.pack(side="left", padx=5, pady=5, anchor="n")
    category_frames.append(frame)
    for j, (name, value) in enumerate(items):
        item_subframe = tk.Frame(frame)
        item_subframe.pack(anchor="w", pady=2)
        tk.Label(item_subframe, text=f"{name} (AP: {value}):", width=30, anchor="w").pack(side="left")
        minus_button = ttk.Button(item_subframe, text="-", command=lambda idx=len(quantity_labels): change_quantity(idx, -1))
        minus_button.pack(side="left")
        lbl = tk.Label(item_subframe, text="0", width=5)
        lbl.pack(side="left")
        quantity_labels.append(lbl)
        plus_button = ttk.Button(item_subframe, text="+", command=lambda idx=len(quantity_labels)-1: change_quantity(idx, 1))
        plus_button.pack(side="left")

btn_reset = ttk.Button(action_button_frame, text="Reset", command=reset)
btn_reset.pack(side="left", padx=5)

btn_calculate = ttk.Button(action_button_frame, text="Calculate", command=calculate)
btn_calculate.pack(side="left", padx=305)

# Spielerbereich unter den Buttons
player_actions_frame = tk.Frame(main_frame)
player_actions_frame.pack(side="top", fill="x", padx=5, pady=5)

btn_add_player = ttk.Button(button_frame, text="Add Player", command=add_player)
btn_add_player.pack(side="left", padx=5, pady=10)

btn_remove_player = ttk.Button(button_frame, text="Remove Player", command=remove_player)
btn_remove_player.pack(side="left", padx=5)

player_frame = tk.Frame(main_frame)
player_frame.pack(side="top", fill="x", padx=5, pady=5)

player_frames = []
for i in range(max_players):
    frame = tk.Frame(player_frame)
    frame.pack(fill="x", pady=2)
    player_frames.append(frame)

update_player_labels()

root.bind_all("<MouseWheel>", on_mouse_wheel)

root.mainloop()
